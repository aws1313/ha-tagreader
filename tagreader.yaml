# Insert your SSID and Your PWD after inital setup
wifi:
  networks:
    - ssid: !secret wifi_alnitak_ssid        # Enter your WiFi SSID here. Example: `ssid: 'your_network_name'`
      password: !secret wifi_alnitak_password     # Enter your wifi password here. Example: `password: 'abcde123456'`
  ap:
    ssid: ${name}

# Enable the captive portal for inital WiFi setup
captive_portal:

#dashboard_import:
#  package_import_url: github://aws1313/ha-tagreader/tagreader.yaml

improv_serial:


substitutions:
  name: tagreader-alarm
  friendly_name: TagReader

esp8266:
  board: d1_mini

esphome:
  name: $name

  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  #project:
  #  name: aws1313.tag_reader
  #  version: dev
# If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - light.turn_on:
        id: power_led
        brightness: 100%
        flash_length: 500ms
    - switch.turn_on: buzzer_enabled
    - switch.turn_on: led_enabled

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config
- platform: template
  name: "${friendly_name} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config

# Define buttons for writing tags via HA
button:
  - platform: template
    name: Write Tag Random
    id: write_tag_random
    # Optional variables:
    icon: "mdi:pencil-box"
    on_press:
      then:
      - light.turn_on:
          id: power_led
          brightness: 100%
          flash_length: 500ms
      - light.turn_on:
          id: alarm_led
          brightness: 100%
      - lambda: |-
          static const char alphanum[] = "0123456789abcdef";
          std::string uri = "https://www.home-assistant.io/tag/";
          for (int i = 0; i < 8; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
          for (int j = 0; j < 3; j++) {
            for (int i = 0; i < 4; i++)
              uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
            uri += "-";
          }
          for (int i = 0; i < 12; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          auto message = new nfc::NdefMessage();
          message->add_uri_record(uri);
          ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
          id(pn532_board).write_mode(message);
      - rtttl.play: "write:d=24,o=5,b=100:b"
      - wait_until:
          not:
            pn532.is_writing:
      - light.turn_off:
          id: alarm_led
      - rtttl.play: "write:d=24,o=5,b=100:b,b"
  - platform: template
    name: Clean Tag
    id: clean_tag
    icon: "mdi:nfc-variant-off"
    on_press:
      then:
      - light.turn_on:
          id: alarm_led
          brightness: 100%
      - lambda: 'id(pn532_board).clean_mode();'
      - rtttl.play: "write:d=24,o=5,b=100:b"
      - wait_until:
          not:
            pn532.is_writing:
      - light.turn_off:
          id: alarm_led
      - rtttl.play: "write:d=24,o=5,b=100:b,b"
  - platform: template
    name: Cancel writing
    id: cancel_writing
    icon: "mdi:pencil-off"
    on_press:
      then:
      - lambda: 'id(pn532_board).read_mode();'
      - light.turn_off:
          id: alarm_led
      - rtttl.play: "write:d=24,o=5,b=100:b,b"

  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config
# Enable logging
logger:
  # level: VERY_VERBOSE
  # level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret tag_reader_encrypt
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on:
        id: alarm_led
        brightness: 100%
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - rtttl.play: "write:d=24,o=5,b=100:b"
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: alarm_led
    - rtttl.play: "write:d=24,o=5,b=100:b,b"

  - service: write_music_tag
    variables:
      music_url: string
      music_info: string
    then:
    - light.turn_on:
        id: alarm_led
        brightness: 100%
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "";
        std::string text = "";
        uri += music_url;
        text += music_info;
        if ( music_url != "" ) {
          message->add_uri_record(uri);
        }
        if ( music_info != "" ) {
          message->add_text_record(text);
        }
        id(pn532_board).write_mode(message);
    - rtttl.play: "write:d=24,o=5,b=100:b"
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: alarm_led
    - rtttl.play: "write:d=24,o=5,b=100:b,b"
  - service: dfplayer_stop
    then:
      - dfplayer.stop
  - service: dfplayer_play_mp3
    variables:
      file: int
    then:
      - dfplayer.play_mp3: !lambda 'return file;'

# Enable OTA upgrade
ota:
  - platform: esphome

i2c:
  scan: False
  frequency: 400kHz
  scl: GPIO04
  sda: GPIO05

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: power_led
            brightness: 100%
            flash_length: 500ms

    - delay: 0.15s #to fix slow component

    - lambda: |-
        id(source)="";
        id(url)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");

            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(url)=payload;
              id(info)=payload.substr(hass + 34);
            }
            else if (type == "T" ) {
              ESP_LOGD("tagreader", "Found music info tag NDEF");
              id(info)=payload;
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        }

    - if:
        condition:
          lambda: 'return ( id(source)=="uid" );'
        then:
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagreader", "No HA NDEF, using UID");
              return x;
    - if:
        condition:
          lambda: 'return ( id(source)=="hass" );'
        then:
        - homeassistant.tag_scanned: !lambda 'return id(info);'


    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
  on_tag_removed:
    then:
    - homeassistant.event:
        event: esphome.tag_removed
# Define outputs
output:
- platform: esp8266_pwm
  pin: D7
  id: buzzer
- platform: esp8266_pwm
  pin: D5
  id: alarm_led_pwm
- platform: esp8266_pwm
  pin: D6
  id: power_led_pwm



binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic


text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
  - platform: homeassistant
    id: alarm_state
    entity_id: alarm_control_panel.alarmo
    on_value:
      then:
        - script.execute: update_state

script:
  - id: update_state
    then:
      - if:
          condition:
            text_sensor.state:
              id: alarm_state
              state: disarmed
          then:
            - dfplayer.stop
            - dfplayer.play_mp3: 
                file: 2

      - if:
          condition:
            text_sensor.state:
              id: alarm_state
              state: arming
          then:
            - dfplayer.stop
            - dfplayer.play_mp3:
                file: 1

      - if:
          any:
            - text_sensor.state:
                id: alarm_state
                state: armed_away
            - text_sensor.state:
                id: alarm_state
                state: armed_vacation
          
          then:
            - dfplayer.stop
            - dfplayer.play_mp3:
                file: 4
          

      - if:
          condition:
            text_sensor.state:
              id: alarm_state
              state: pending
          then:
            - dfplayer.stop
            - dfplayer.play_mp3:
                file: 3
            


          


# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

light:
#power led
- platform: monochromatic
  name: "${friendly_name} Power LED"
  id: power_led
  output: power_led_pwm
  # alarm led
- platform: monochromatic
  name: "${friendly_name} ALARM LED"
  id: alarm_led
  output: alarm_led_pwm

# dfplayer with speaker
uart:
  tx_pin: GPIO0
  rx_pin: GPIO2
  baud_rate: 9600

dfplayer: